@using GSID.FrontEnd.ViewModels;
@using GSID.Model.ExtraEntities;
@using GSID.Model.MongodbModels;
@using GSID.Setting;
@model ContactMessageViewModel
@{
    List<GSID.FrontEnd.Models.Language> languages = (List<GSID.FrontEnd.Models.Language>)System.Web.HttpContext.Current.Application[SestionName.Languages];
    GSID.FrontEnd.Models.Language vnLan = new GSID.FrontEnd.Models.Language();
    GSID.FrontEnd.Models.Language enLan = new GSID.FrontEnd.Models.Language();
    GSID.FrontEnd.Models.Language currentLan = new GSID.FrontEnd.Models.Language();
    if (languages != null)
    {
        vnLan = languages.Where(i => i.Country == GSID.FrontEnd.Models.Language.LanguagueCountry.Vietmamese).FirstOrDefault();
        enLan = languages.Where(i => i.Country == GSID.FrontEnd.Models.Language.LanguagueCountry.English).FirstOrDefault();
        currentLan = languages.Where(i => i.Current == true).FirstOrDefault();
    }
    var SiteInformation = GSID.FrontEnd.Controllers.BaseController.GSIDSessionSiteInformation;
    string httpStatic = SiteInformation != null ? SiteInformation.UrlAddressSiteMultimedia : "";
}

@if (Model != null)
{
    if (currentLan.Country == GSID.FrontEnd.Models.Language.LanguagueCountry.Vietmamese)
    {
<div class="contact_form">
    @using (Html.BeginForm("ContactMessage", "ContactUs", FormMethod.Post, new { @class = "contact_form_box", enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(m => m.Language)
        @Html.Hidden("confirmButtonText", "Thoát")
        @Html.Hidden("ProcessMessage", "Đang xử lý dữ liệu")
        @Html.Hidden("ErrorTitle", "Lỗi")
        @Html.Hidden("ErrorMessage", "Hệ thống internet gặp vấn đề. Xin vui lòng kiểm tra")
        <div class="row">
            <div class="col-lg-6">
                <label class="form-label">Họ và tên <span class="text-danger">*</span></label>
                <div class="form-icon form-group">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-user fea icon-sm icons"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
                    @Html.TextBoxFor(model => model.FullName, new { @class = "form-control", @placeholder = "Họ và tên:" })
                </div>
            </div>
            <div class="col-lg-6">
                <label class="form-label">Email <span class="text-danger">*</span></label>
                <div class="form-icon form-group">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-mail fea icon-sm icons"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @placeholder = "Email:" })
                </div>
            </div>
            <div class="col-lg-12">
                <label class="form-label">Số điện thoại <span class="text-danger">*</span></label>
                <div class="form-icon form-group">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-book fea icon-sm icons"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path></svg>
                    @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control", @placeholder = "Số điện thoại:" })
                </div>
            </div>
            <div class="col-lg-12">
                <label class="form-label">Nội dung <span class="text-danger">*</span></label>
                <div class="form-icon form-group">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-message-circle fea icon-sm icons clearfix"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path></svg>
                    @Html.TextAreaFor(model => model.Message, new { @class = "form-control", @placeholder = "Nội dung:" })
                </div>
            </div>
        </div>
        <button type="submit" class="btn-submit">Gửi</button>
    }
</div>
    }
    else if (currentLan.Country == GSID.FrontEnd.Models.Language.LanguagueCountry.English)
    {
<div class="contact_form">
    @using (Html.BeginForm("ContactMessage", "ContactUs", FormMethod.Post, new { @class = "contact_form_box", enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(m => m.Language)
        @Html.Hidden("confirmButtonText", "Close")
        @Html.Hidden("ProcessMessage", "Processing")
        @Html.Hidden("ErrorTitle", "Error")
        @Html.Hidden("ErrorMessage", "There is a problem with the internet system. Please check")
        <div class="row">
            <div class="col-lg-6">
                <label class="form-label">Full name <span class="text-danger">*</span></label>
                <div class="form-icon form-group">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-user fea icon-sm icons"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
                    @Html.TextBoxFor(model => model.FullName, new { @class = "form-control", @placeholder = "Full name:" })
                </div>
            </div>
            <div class="col-lg-6">
                <label class="form-label">Email <span class="text-danger">*</span></label>
                <div class="form-icon form-group">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-mail fea icon-sm icons"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @placeholder = "Email:" })
                </div>
            </div>
            <div class="col-lg-12">
                <label class="form-label">Phone number <span class="text-danger">*</span></label>
                <div class="form-icon form-group">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-book fea icon-sm icons"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path></svg>
                    @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control", @placeholder = "Phone number:" })
                </div>
            </div>
            <div class="col-lg-12">
                <label class="form-label">Message <span class="text-danger">*</span></label>
                <div class="form-icon form-group">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-message-circle fea icon-sm icons clearfix"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path></svg>
                    @Html.TextAreaFor(model => model.Message, new { @class = "form-control", @placeholder = "Message:" })
                </div>
            </div>
        </div>
        <button type="submit" class="btn-submit">Send</button>
    }
</div>
    }
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/jquery-2.1.1.js"></script>
<script type="text/javascript" src="~/Scripts/jquery.form.min.js" crossorigin="anonymous"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<script type="text/javascript">
    $(function () {
        $('form').ajaxForm({
            delegation: true,
            beforeSubmit: function (arr, form, options) {
                var validator = form.validate(); // obtain validator
                var anyError = false;
                try {
                    form.find("input,select").each(function () {
                        if (!validator.element(this)) { // validate every input element inside this step
                            anyError = true;
                        }
                    });
                } catch (e) {
                }
                if (anyError) {
                    return false; // exit if any error found
                }
                var processTitle = $('#ProcessMessage').val();
                Swal.fire({
                    title: processTitle,
                    showConfirmButton: false,
                    showCloseButton: false,
                    showCancelButton: false,
                    focusConfirm: false,
                });
            },
            success: function (data, statusText) {
                setTimeout(function () {
                    if (data.Status == '2') {
                        $('#FullName').val('');
                        $('#Email').val('');
                        $('#Subject').val('');
                        $('#Message').val('');
                        $.validator.unobtrusive.parse("form");
                    }
                    Swal.fire({
                        title: data.Title,
                        text: data.Message,
                        showConfirmButton: true,
                        confirmButtonText: $('#confirmButtonText').val(),
                        confirmButtonColor: '#1a477fd6'
                    });
                }, 500);
            },
            error: function (xhr, textStatus, errorThrown) {
                var title = $('#ErrorTitle').val();
                var message = $('#ErrorMessage').val();
                Swal.fire(title, message);

            },
            complete: function (xhr) {
                console.log("in ajaxForm complete");
                //status.html(xhr.responseText);
            }
        });
    });
</script>
